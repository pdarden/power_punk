import { encodeFunctionData, parseUnits, encodeDeployData } from "viem";
import CoopEscrowABI from "./abi/CoopEscrow.json";
import ProjectRegistryABI from "./abi/ProjectRegistry.json";
import registryConfig from "./registry.json";
import {
  CoopEscrowDeployParams,
  ContributionParams,
  FinalizationParams,
  NETWORK_CONFIG,
} from "./types";

// Contract ABIs from deployed contracts
export const COOP_ESCROW_ABI = CoopEscrowABI;
export const PROJECT_REGISTRY_ABI = ProjectRegistryABI;

// CoopEscrow bytecode for contract deployment
export const COOP_ESCROW_BYTECODE =
  "" as `0x${string}`;

// Get deployed contract addresses from registry
export function getDeployedContracts(
  isTestnet: boolean = process.env.NODE_ENV !== "production",
) {
  const network = isTestnet ? "baseSepolia" : "base";
  return registryConfig[network]?.contracts || {};
}

// Helper to get network config based on environment
export function getNetworkConfig() {
  // Use testnet for development, mainnet for production
  const isProduction = process.env.NODE_ENV === "production";
  return isProduction
    ? NETWORK_CONFIG.BASE_MAINNET
    : NETWORK_CONFIG.BASE_SEPOLIA;
}

// Create contract deployment transaction (following Integration.ts pattern)
export function createEscrowDeploymentTransaction(
  params: CoopEscrowDeployParams,
) {
  const networkConfig = getNetworkConfig();

  // Encode constructor parameters
  const constructorData = encodeFunctionData({
    abi: COOP_ESCROW_ABI,
    functionName: "constructor" as any,
    args: [
      params.token,
      params.beneficiary,
      params.goal,
      params.deadline,
      params.minContribution,
      params.creatorContribution,
    ],
  });

  // Combine bytecode with constructor parameters
  const deployData = (COOP_ESCROW_BYTECODE +
    constructorData.slice(2)) as `0x${string}`;

  return {
    to: undefined, // Contract deployment
    data: deployData,
    gas: BigInt(2000000), // 2M gas for deployment
    chainId: networkConfig.chainId,
    type: "eip1559" as const,
  };
}

// Encode project creation in registry
export function encodeProjectCreation(
  ensName: string,
  escrowAddress: string,
  metaURI: string,
): `0x${string}` {
  return encodeFunctionData({
    abi: PROJECT_REGISTRY_ABI,
    functionName: "createProject",
    args: [ensName, escrowAddress, metaURI],
  }) as `0x${string}`;
}

// Encode contribution function call
export function encodeContribution(amount: bigint): `0x${string}` {
  return encodeFunctionData({
    abi: COOP_ESCROW_ABI,
    functionName: "contribute",
    args: [amount],
  }) as `0x${string}`;
}

// Encode finalization function call
export function encodeFinalization(finalAmount: bigint): `0x${string}` {
  return encodeFunctionData({
    abi: COOP_ESCROW_ABI,
    functionName: "finalize",
    args: [finalAmount],
  }) as `0x${string}`;
}

// Encode refund claim function call
export function encodeClaimRefund(): `0x${string}` {
  return encodeFunctionData({
    abi: COOP_ESCROW_ABI,
    functionName: "claimRefund",
    args: [],
  }) as `0x${string}`;
}

// Encode full refund function call (for failed projects)
export function encodeRefund(): `0x${string}` {
  return encodeFunctionData({
    abi: COOP_ESCROW_ABI,
    functionName: "refund",
    args: [],
  }) as `0x${string}`;
}

// USDC approval encoding
export function encodeUSDCApproval(
  spender: string,
  amount: bigint,
): `0x${string}` {
  return encodeFunctionData({
    abi: [
      {
        inputs: [
          { internalType: "address", name: "spender", type: "address" },
          { internalType: "uint256", name: "amount", type: "uint256" },
        ],
        name: "approve",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "nonpayable",
        type: "function",
      },
    ],
    functionName: "approve",
    args: [spender as `0x${string}`, amount],
  }) as `0x${string}`;
}

// Utility functions for common operations
export function parseUSDCAmount(amount: string | number): bigint {
  return parseUnits(amount.toString(), 6); // USDC has 6 decimals
}

// Create project registration transaction (for deployed contracts)
export function createProjectRegistrationTransaction(
  ensName: string,
  escrowAddress: string,
  metaURI: string,
) {
  const networkConfig = getNetworkConfig();
  const registryAddress = getRegistryAddress();

  return {
    to: registryAddress as `0x${string}`,
    data: encodeProjectCreation(ensName, escrowAddress, metaURI),
    gas: BigInt(200000), // Estimated gas for project registration
    chainId: networkConfig.chainId,
    type: "eip1559" as const,
  };
}

export function createContributionTransactions(params: ContributionParams) {
  const networkConfig = getNetworkConfig();

  // First transaction: Approve USDC spending
  const approvalTx = {
    to: networkConfig.usdcAddress,
    data: encodeUSDCApproval(params.contractAddress, params.amount),
    gas: BigInt(65000),
    chainId: networkConfig.chainId,
    type: "eip1559" as const,
  };

  // Second transaction: Contribute to escrow
  const contributionTx = {
    to: params.contractAddress,
    data: encodeContribution(params.amount),
    gas: BigInt(150000),
    chainId: networkConfig.chainId,
    type: "eip1559" as const,
  };

  return { approvalTx, contributionTx };
}

export function createFinalizationTransaction(params: FinalizationParams) {
  const networkConfig = getNetworkConfig();

  return {
    to: params.contractAddress,
    data: encodeFinalization(params.finalAmount),
    gas: BigInt(200000),
    chainId: networkConfig.chainId,
    type: "eip1559" as const,
  };
}

// Helper function for getting registry address (only registry is pre-deployed)
export function getRegistryAddress(isTestnet?: boolean): string {
  const contracts = getDeployedContracts(isTestnet);
  return contracts.ProjectRegistry?.address || "";
}

// Contract read operations - encode read function calls
export function encodeGetProject(projectId: bigint): string {
  return encodeFunctionData({
    abi: PROJECT_REGISTRY_ABI,
    functionName: "getProject",
    args: [projectId],
  });
}

export function encodeGetEscrowTotal(): string {
  return encodeFunctionData({
    abi: COOP_ESCROW_ABI,
    functionName: "total",
    args: [],
  });
}

export function encodeGetUserContribution(userAddress: string): string {
  return encodeFunctionData({
    abi: COOP_ESCROW_ABI,
    functionName: "depositedOf",
    args: [userAddress],
  });
}
